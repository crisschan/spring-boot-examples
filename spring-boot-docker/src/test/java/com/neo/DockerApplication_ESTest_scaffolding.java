/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Thu Jul 18 07:24:01 GMT 2019
 */

package com.neo;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class DockerApplication_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.neo.DockerApplication"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/var/folders/j5/cwby01xs3h1cxd1rlnj9bxqr0000gn/T/"); 
    java.lang.System.setProperty("user.country", "CN"); 
    java.lang.System.setProperty("user.dir", "/Users/chancriss/Desktop/CrissWorkSpace/JavaSpace/own/testexample/spring-boot-docker"); 
    java.lang.System.setProperty("user.home", "/Users/chancriss"); 
    java.lang.System.setProperty("user.language", "zh"); 
    java.lang.System.setProperty("user.name", "chancriss"); 
    java.lang.System.setProperty("user.timezone", "Asia/Shanghai"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DockerApplication_ESTest_scaffolding.class.getClassLoader() ,
      "org.springframework.core.ParameterNameDiscoverer",
      "org.springframework.util.StringValueResolver",
      "org.springframework.core.convert.support.ConfigurableConversionService",
      "org.springframework.core.env.PropertySource$ComparisonPropertySource",
      "org.springframework.beans.PropertyEditorRegistry",
      "org.springframework.core.env.PropertyResolver",
      "org.springframework.core.type.classreading.MetadataReader",
      "org.springframework.context.ApplicationEventPublisher",
      "org.springframework.util.ConcurrentReferenceHashMap$Segment$1",
      "org.springframework.beans.TypeConverter",
      "org.springframework.core.ParameterizedTypeReference$1",
      "org.springframework.context.annotation.ImportSelector",
      "org.springframework.context.MessageSourceResolvable",
      "org.springframework.core.NestedExceptionUtils",
      "org.springframework.core.io.Resource",
      "org.springframework.boot.autoconfigure.AutoConfigurationImportSelector",
      "org.springframework.core.type.AnnotationMetadata",
      "org.springframework.beans.factory.InjectionPoint",
      "org.springframework.core.convert.converter.ConverterRegistry",
      "org.springframework.beans.TypeMismatchException",
      "org.springframework.core.env.CompositePropertySource",
      "org.springframework.boot.SpringBootExceptionHandler",
      "org.springframework.core.AttributeAccessor",
      "org.springframework.boot.SpringApplicationRunListeners",
      "org.springframework.beans.factory.support.BeanDefinitionReader",
      "org.springframework.beans.factory.support.BeanNameGenerator",
      "org.springframework.core.io.InputStreamSource",
      "org.springframework.util.ConcurrentReferenceHashMap$Task",
      "org.springframework.beans.PropertyValues",
      "org.springframework.boot.ExitCodeGenerator",
      "org.springframework.beans.factory.config.NamedBeanHolder",
      "org.springframework.beans.factory.ListableBeanFactory",
      "org.springframework.core.Ordered",
      "org.springframework.boot.autoconfigure.AutoConfigurationPackage",
      "org.springframework.core.env.CommandLinePropertySource",
      "org.springframework.util.ConcurrentReferenceHashMap$Entry",
      "org.springframework.boot.ApplicationArguments",
      "org.springframework.core.env.PropertySource",
      "org.springframework.core.ParameterizedTypeReference",
      "org.springframework.core.env.ConfigurablePropertyResolver",
      "org.springframework.core.env.EnumerablePropertySource",
      "org.springframework.util.ConcurrentReferenceHashMap$TaskOption",
      "org.springframework.boot.context.TypeExcludeFilter",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager",
      "org.springframework.util.ConcurrentReferenceHashMap",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceType",
      "org.springframework.core.env.MissingRequiredPropertiesException",
      "org.springframework.core.env.ConfigurableEnvironment",
      "org.springframework.beans.factory.config.ConstructorArgumentValues",
      "org.springframework.beans.BeanMetadataAttributeAccessor",
      "org.springframework.beans.factory.BeanFactoryAware",
      "org.springframework.boot.BeanDefinitionLoader",
      "org.springframework.core.env.EnvironmentCapable",
      "org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder",
      "org.springframework.beans.factory.config.BeanDefinition",
      "org.springframework.stereotype.Indexed",
      "org.springframework.boot.CommandLineRunner",
      "org.springframework.beans.factory.NoUniqueBeanDefinitionException",
      "org.springframework.core.convert.ConversionService",
      "org.springframework.core.ResolvableType$EmptyType",
      "org.springframework.context.MessageSource",
      "org.springframework.util.ConcurrentReferenceHashMap$1",
      "org.springframework.util.ConcurrentReferenceHashMap$2",
      "org.springframework.util.ConcurrentReferenceHashMap$3",
      "org.springframework.boot.autoconfigure.SpringBootApplication",
      "org.springframework.util.ConcurrentReferenceHashMap$4",
      "org.springframework.boot.autoconfigure.EnableAutoConfiguration",
      "org.springframework.beans.factory.config.SingletonBeanRegistry",
      "org.springframework.boot.BeanDefinitionLoader$GroovyBeanDefinitionSource",
      "org.springframework.beans.PropertyAccessException",
      "org.springframework.boot.ExitCodeEvent",
      "org.springframework.beans.factory.config.BeanFactoryPostProcessor",
      "org.springframework.context.ResourceLoaderAware",
      "org.springframework.context.annotation.Import",
      "org.springframework.util.ConcurrentReferenceHashMap$Entries",
      "org.springframework.util.MultiValueMap",
      "org.springframework.beans.BeansException",
      "org.springframework.beans.MutablePropertyValues",
      "org.springframework.beans.factory.BeanDefinitionStoreException",
      "org.springframework.context.annotation.ComponentScan",
      "org.springframework.context.Lifecycle",
      "org.springframework.context.ApplicationEvent",
      "org.springframework.boot.context.annotation.DeterminableImports",
      "org.springframework.beans.factory.ObjectFactory",
      "org.springframework.core.ResolvableType$1",
      "org.springframework.boot.SpringBootConfiguration",
      "org.springframework.beans.factory.BeanFactory",
      "org.springframework.boot.WebApplicationType",
      "org.springframework.util.ConcurrentReferenceHashMap$5",
      "org.springframework.beans.factory.config.ConfigurableBeanFactory",
      "org.springframework.beans.factory.HierarchicalBeanFactory",
      "org.springframework.context.NoSuchMessageException",
      "org.springframework.core.type.filter.TypeFilter",
      "org.springframework.util.ConcurrentReferenceHashMap$Reference",
      "org.springframework.util.ConcurrentReferenceHashMap$Segment",
      "org.springframework.core.type.ClassMetadata",
      "org.springframework.boot.Banner$Mode",
      "org.springframework.beans.factory.support.BeanDefinitionRegistry",
      "org.springframework.context.annotation.ComponentScan$Filter",
      "org.springframework.beans.factory.config.ConfigurableListableBeanFactory",
      "org.springframework.core.env.SimpleCommandLinePropertySource",
      "org.springframework.boot.SpringApplication",
      "org.springframework.core.env.PropertySource$StubPropertySource",
      "org.springframework.core.convert.TypeDescriptor$AnnotatedElementAdapter",
      "org.springframework.context.ConfigurableApplicationContext",
      "org.springframework.core.MethodParameter",
      "org.springframework.core.convert.converter.GenericConverter",
      "org.springframework.core.ResolvableType",
      "com.neo.DockerApplication",
      "org.springframework.boot.autoconfigure.AutoConfigurationPackages$Registrar",
      "org.springframework.beans.PropertyEditorRegistrar",
      "org.springframework.core.NestedRuntimeException",
      "org.springframework.core.io.ResourceLoader",
      "org.springframework.boot.ApplicationRunner",
      "org.springframework.context.ApplicationListener",
      "org.springframework.core.env.PropertySources",
      "org.springframework.core.convert.Property",
      "org.springframework.context.annotation.Configuration",
      "org.springframework.core.AliasRegistry",
      "org.springframework.beans.factory.config.BeanPostProcessor",
      "org.springframework.beans.factory.config.DependencyDescriptor$1",
      "org.springframework.core.SerializableTypeWrapper$TypeProvider",
      "org.springframework.core.AttributeAccessorSupport",
      "org.springframework.core.env.MapPropertySource",
      "org.springframework.core.env.Environment",
      "org.springframework.core.io.ProtocolResolver",
      "org.springframework.core.ResolvableType$VariableResolver",
      "org.springframework.core.env.MutablePropertySources",
      "org.springframework.context.annotation.AnnotationScopeMetadataResolver",
      "org.springframework.beans.factory.BeanClassLoaderAware",
      "org.springframework.util.ConcurrentReferenceHashMap$Restructure",
      "org.springframework.context.annotation.DeferredImportSelector",
      "org.springframework.boot.autoconfigure.AutoConfigurationExcludeFilter",
      "org.springframework.beans.factory.Aware",
      "org.springframework.beans.factory.config.AutowireCapableBeanFactory",
      "org.springframework.beans.factory.config.Scope",
      "org.springframework.boot.SpringBootExceptionHandler$LoggedExceptionHandlerThreadLocal",
      "org.springframework.beans.factory.config.DependencyDescriptor",
      "org.springframework.context.annotation.ScopeMetadata",
      "org.springframework.context.annotation.ImportBeanDefinitionRegistrar",
      "org.springframework.context.annotation.ComponentScans",
      "org.springframework.core.convert.TypeDescriptor",
      "org.springframework.context.annotation.FilterType",
      "org.springframework.core.convert.converter.Converter",
      "org.springframework.beans.BeanMetadataElement",
      "org.springframework.beans.FatalBeanException",
      "org.springframework.boot.Banner",
      "org.springframework.beans.PropertyValue",
      "org.springframework.context.annotation.ScopedProxyMode",
      "org.springframework.core.convert.converter.ConverterFactory",
      "org.springframework.boot.SpringApplicationRunListener",
      "org.springframework.beans.factory.NamedBean",
      "org.springframework.beans.factory.config.BeanExpressionContext",
      "org.springframework.context.ApplicationContext",
      "org.springframework.stereotype.Component",
      "org.springframework.core.type.classreading.MetadataReaderFactory",
      "org.springframework.context.annotation.ScopeMetadataResolver",
      "org.springframework.context.EnvironmentAware",
      "org.springframework.beans.factory.NoSuchBeanDefinitionException",
      "org.springframework.core.io.support.ResourcePatternResolver",
      "org.springframework.core.type.AnnotatedTypeMetadata",
      "org.springframework.context.ApplicationContextInitializer",
      "org.springframework.util.Assert",
      "org.springframework.beans.factory.config.BeanExpressionResolver"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DockerApplication_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.neo.DockerApplication",
      "org.springframework.boot.SpringApplication"
    );
  }
}
