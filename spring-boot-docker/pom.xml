<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.neo</groupId>
	<artifactId>spring-boot-docker</artifactId>
	<version>1.0</version>
	<packaging>jar</packaging>

	<name>spring-boot-docker</name>
	<description>Demo project for Spring Boot</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.0.RELEASE</version>
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>1.8</java.version>
		<docker.image.prefix>springboot</docker.image.prefix>
		<evosuiteVersion>1.0.6</evosuiteVersion>
	</properties>

	<dependencies>
		<!--引入Junit4的依赖-->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>

		<!--引入evosuite依赖-->

		<dependency>
			<groupId>org.evosuite</groupId>
			<artifactId>evosuite-standalone-runtime</artifactId>
			<version>${evosuiteVersion}</version>
			<scope>test</scope>
		</dependency>

	     <dependency>
	        <groupId>org.springframework.boot</groupId>
	        <artifactId>spring-boot-starter-web</artifactId>
	    </dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!--引入junit的执行插件依赖-->

		<dependency>
			<groupId>org.apache.maven.surefire</groupId>
			<artifactId>surefire-junit4</artifactId>
			<version>2.19</version>
		</dependency>
		<!-- 引入报告生成依赖-->

		<dependency>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-surefire-report-plugin</artifactId>
			<version>3.0.0-M3</version>
		</dependency>
	</dependencies>
	
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<!-- Docker maven plugin -->
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>1.0.0</version>
				<configuration>
					<imageName>${docker.image.prefix}/${project.artifactId}</imageName>
					<dockerDirectory>src/main/docker</dockerDirectory>
					<resources>
						<resource>
							<targetPath>/</targetPath>
							<directory>${project.build.directory}</directory>
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>
				</configuration>
			</plugin>
			<!-- Docker maven plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<skipTests>false</skipTests>
					<testFailureIgnore>true</testFailureIgnore> <!-- //////////// -->

					<includes>
						<include>**/*Test.java</include>    <!-- //////////// -->
					</includes>
					<excludes>
						<!-- -->
					</excludes>
				</configuration>
			</plugin>

			<!--引入evosuite生成单元测试用例插件-->

			<plugin>
				<groupId>org.evosuite.plugins</groupId>
				<artifactId>evosuite-maven-plugin</artifactId>
				<version>1.0.6</version>
				<executions>
					<execution>
						<goals>
							<goal>prepare</goal>
						</goals>
						<phase>process-test-classes</phase>
					</execution>
				</executions>
			</plugin>
			<!--引入cobertura代码覆盖插件-->

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
				<version>2.7</version>
				<configuration>
					<instrumentation>
						<ignores>
							<ignore>com.example.boringcode.*</ignore>
						</ignores>
						<excludes>
							<exclude>com/example/dullcode/**/*.class</exclude>
							<exclude>com/example/**/*Test.class</exclude>
						</excludes>
					</instrumentation>
					<check/>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>clean</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- 用mvn ant生成格式更友好的report -->
			<plugin>
				<groupId>org.jvnet.maven-antrun-extended-plugin</groupId>
				<artifactId>maven-antrun-extended-plugin</artifactId>   <!-- //////////// -->
				<version>1.43</version>
				<executions>
					<execution>
						<id>test-reports</id>
						<phase>test</phase> <!-- //////////// -->
						<configuration>
							<tasks>
								<junitreport todir="${basedir}/target/">
									<fileset dir="${basedir}/target/">
										<include name="**/*.xml"/>
									</fileset>
									<report format="frames"
											todir="${basedir}/target/"/> <!-- //////////// -->
								</junitreport>
							</tasks>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.apache.ant</groupId>
						<artifactId>ant-junit</artifactId>
						<version>1.8.0</version>
					</dependency>
					<dependency>
						<groupId>org.apache.ant</groupId>
						<artifactId>ant-trax</artifactId>
						<version>1.8.0</version>
					</dependency>
				</dependencies>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-report-plugin</artifactId>
				<version>3.0.0-M3</version>

			</plugin>
		</plugins>
	</build>
	<!-- 代码覆盖报告 -->


	<reporting>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
				<version>2.7</version>
			</plugin>
		</plugins>
	</reporting>

</project>
